---
- name: Delete Marathon tasks
  uri: 
    url: "{{ marathon_api_base_url ~ '/apps/' ~ ((item|from_json).id) ~ '/?force=true' }}"
    method: DELETE
    HEADER_Content-type: "application/json"
    status_code: 200
  ignore_errors: true
  with_file: marathon_task_files
- name: Build application Docker image
  docker_image: >
    path=/vagrant 
    name=django_mesos_example_application
    state=present
    tag={{application_docker_image_version_tag}}
- name: Retrieve Marathon apps
  uri:
    url: "{{ marathon_api_base_url ~ '/apps' }}"
    status_code: 200
  register: var_marathon_current_app_list_response
- set_fact:
    marathon_installed_apps: "{{ var_marathon_current_app_list_response.json.apps|map(attribute='id')|list }}"
- name: Submit Marathon tasks (Mesos-DNS, Marathon-lb, MySQL)
  uri: 
    url: "{{marathon_api_base_url ~ '/apps/?force=true'}}"
    method: POST
    HEADER_Content-type: "application/json"
    body: "{{lookup('template', item, convert_data=False)}}"
    body_format: json
    status_code: 200,201
  with_items: "{{marathon_task_files[:3]}}"
  when: "{{'/' ~ ((lookup('template', item, convert_data=False)|from_json).id) not in marathon_installed_apps}}"
- name: Wait for ports to become available (HAProxy, Mesos-DNS, Mysql)
  wait_for: >
    port={{item}}
    timeout=300
  with_items:
    - 8123
    - 80
    - 3306
- name: Check that Mesos-DNS has been updated
  uri: >
    url="http://localhost:8123/v1/services/_mysql-db._tcp.marathon.mesos."
    return_content=yes
  register: var_mysql_mesos_dns_response
  until: var_mysql_mesos_dns_response.json.0.ip != ""
  retries: 10
  delay: 10
- name: Check that MySQL is accepting connections
  mysql_variables: >
    login_host={{ansible_default_ipv4.address}}
    login_user=root
    login_password={{mysql_root_password}}
    variable=version
  register: var_mysql_version_check
  until: var_mysql_version_check|success
  retries: 6
  delay: 10 
- name: Get MySQL host IP from Mesos-DNS
  get_url: >    
    url="http://localhost:8123/v1/services/_mysql-db._tcp.marathon.mesos."
    dest=/vagrant/template_api/template_api/mysql-dns.json
- name: "[Django] DB migrate & Collect static files"
  docker:
    detach: false
    image: 'django_mesos_example_application:{{application_docker_image_version_tag}}'
    command: '/usr/bin/python manage.py {{item}} --no-input'
    volumes:
      - '/vagrant:/app/web'
  with_items:
    - collectstatic
    - migrate
- name: "Submit Marathon tasks (Application & Nginx)"
  uri: 
    url: "{{marathon_api_base_url ~ '/apps/?force=true'}}"
    method: POST
    HEADER_Content-type: "application/json"
    body: "{{lookup('template', item, convert_data=False)}}"
    body_format: json
    status_code: 200,201
  with_items: "{{marathon_task_files[3:]}}"
  when: "{{'/' ~ ((lookup('template', item, convert_data=False)|from_json).id) not in marathon_installed_apps}}"
- name: Wait for ports to become available (Nginx)
  wait_for: >
    port={{item}}
    timeout=300
  with_items:
    - 7070

